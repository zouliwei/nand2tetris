// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //  instruction = [i, x, x, a, c1, c2, c3, c4, c5, c6, d1, d2, d3, j1, j2, j3]

        Or(a=instruction[15], b=false, out=i);
        Or(a=instruction[12], b=false, out=a);
        Or(a=instruction[11], b=false, out=c1);
        Or(a=instruction[10], b=false, out=c2);
        Or(a=instruction[9],  b=false, out=c3);
        Or(a=instruction[8],  b=false, out=c4);
        Or(a=instruction[7],  b=false, out=c5);
        Or(a=instruction[6],  b=false, out=c6);
        Or(a=instruction[5],  b=false, out=d1);
        Or(a=instruction[4],  b=false, out=d2);
        Or(a=instruction[3],  b=false, out=d3);
        Or(a=instruction[2],  b=false, out=j1);
        Or(a=instruction[1],  b=false, out=j2);
        Or(a=instruction[0],  b=false, out=j3);

        Not(in=i, out=ni);
        Or(a=ni, b=d1, out=writeA);
        And(a=i, b=d2, out=writeD);
        And(a=i, b=d3, out=writeM);

    //  ALU

        ALU(x=D, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, zr=zr, ng=ng, out=outM, out=comp);

    //  DRegister

        DRegister(in=comp, load=writeD, out=D);

    //  I-instruction or C-instruction ?

        Mux16(a=instruction, b=comp, sel=i, out=IorC);

    //  ARegister

        ARegister(in=IorC, load=writeA, out=A, out[0..14]=addressM);

    //  ARegister or Memory[A] ?
        
        Mux16(a=A, b=inM, sel=a, out=AorM);

    //  Jump or Not ?

        Not(in=zr, out=nz);
        Not(in=ng, out=ps);
        
        And(a=ng, b=nz, out=isNg);
        And(a=j1, b=isNg, out=jump1);
        
        And(a=zr, b=ps, out=isZr);
        And(a=j2, b=isZr, out=jump2);
        
        And(a=ps, b=nz, out=isPs);
        And(a=j3, b=isPs, out=jump3);
        
        Or(a=jump1, b=jump2, out=jump4);
        Or(a=jump3, b=jump4, out=jump5);
        And(a=jump5, b=i, out=jump);

    //  PC

        PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
